{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNzS2H0ollhqW4gR5agdJqy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"fQ0KjVOpV9_r","executionInfo":{"status":"ok","timestamp":1697260869532,"user_tz":-330,"elapsed":409,"user":{"displayName":"YASH KHANDELWAL","userId":"02435088469782278131"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd"]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics.pairwise import linear_kernel\n","\n","# Load the dataset\n","movies = pd.read_csv('/content/movies.csv', sep='\\t', encoding='latin-1', usecols=['movie_id', 'title', 'genres'])\n","\n","# Break up the big genre string into a string array\n","movies['genres'] = movies['genres'].str.split('|')\n","# Convert genres to string value\n","movies['genres'] = movies['genres'].fillna(\"\").astype('str')\n","\n","# Create TF-IDF matrix\n","tf = TfidfVectorizer(analyzer='word', ngram_range=(1, 2), min_df=0, stop_words='english')\n","tfidf_matrix = tf.fit_transform(movies['genres'])\n","\n","# Calculate cosine similarity\n","cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n","\n","# Build a 1-dimensional array with movie titles\n","titles = movies['title']\n","indices = pd.Series(movies.index, index=movies['title'])\n","\n","# Function that gets movie recommendations based on the cosine similarity score of movie genres\n","def genre_recommendations(title):\n","    idx = indices[title]\n","    sim_scores = list(enumerate(cosine_sim[idx]))\n","    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n","    sim_scores = sim_scores[1:21]  # Get the top 20 similar movies\n","    movie_indices = [i[0] for i in sim_scores]\n","    return titles.iloc[movie_indices]\n","\n","# Call the function to get genre-based recommendations for a movie\n","recommended_movies = genre_recommendations('Toy Story (1995)')\n","print(recommended_movies.head(10))\n"],"metadata":{"id":"hvaVPMvDlvjD"},"execution_count":null,"outputs":[]}]}